syntax = "proto3";

import "wire.proto";
import "errors.proto";

package perunremote;

message Message {
    oneof msg {
        FundReq fund_req = 1;
        FundResp fund_resp = 2;
        WatchRequestMsg watch_request = 3;
        WatchResponseMsg watch_response = 4;
        ForceCloseRequestMsg force_close_request = 5;
        ForceCloseResponseMsg force_close_response = 6;
        DisputeNotification dispute_notification = 7;
    }
}

message FundReq {
    string sessionID=1;
    perunwire.Params params = 2;
    perunwire.State state = 3;
    uint32 idx = 4;
    perunwire.Balances agreement = 5;
}

message FundResp {
    MsgError error = 1;
}

message WatchRequestMsg {
    uint32 participant = 1;
    perunwire.SignedState state = 2;
    // Signatures of the WithdrawalAuths needed for withdrawing assets on-chain
    // (repeated for each asset_index):
    repeated SignedWithdrawalAuth withdrawal_auths = 3;
}

// Data necessary to construct a WithdrawalAuth object for withdrawing funds
// from the channel. State, Params and the asset_index=index_in_list are
// additionally needed.
message SignedWithdrawalAuth {
    // Content of the on-chain WithdrawalAuth object (Ethereum):
    //     bytes32 channelID = state.id;
    //     address participant = params.parts[i];
    //     address payable receiver; // On-chain address specified by application
    //     uint256 amount = state.allocation.balances[asset_index].balances[i];
    bytes sig = 1;
    bytes receiver = 2;
}

message WatchResponseMsg {
    bytes channel_id = 1;
    uint64 version = 2;
    bool success = 3;
}

message ForceCloseRequestMsg {
    bytes channel_id = 1;
    // Implicitly optional (messages have explicit presence). I'd love to mark
    // it explicitly as optional to indicate that it is intentionally optional,
    // but that requires protoc version 3.15 which the CI does not have (version
    // on Ubuntu: 3.12.4). We could either enable the experimental flag or
    // remove the optional flag. Since the flag doesn't make a real difference
    // here due to the "message" type, I've removed it.
    WatchRequestMsg latest = 2;
}

message ForceCloseResponseMsg {
    bytes channel_id = 1;
    bool success = 3;
}

message DisputeNotification {
    bytes channel_id = 1;
}

syntax = "proto3";

import "wire.proto";
import "errors.proto";

package perunremote;

message Message {
    oneof msg {
        FundReq fund_req = 1;
        FundResp fund_resp = 2;
        RegisterReq register_req = 3;
        RegisterResp register_resp = 4;
        WithdrawReq withdraw_req = 5;
        WithdrawResp withdraw_resp = 6;
        WatchRequestMsg watch_request = 7;
        WatchResponseMsg watch_response = 8;
        ForceCloseRequestMsg force_close_request = 9;
        ForceCloseResponseMsg force_close_response = 10;
        DisputeNotification dispute_notification = 11;
    }
}

message FundReq {
    string sessionID=1;
    perunwire.Params params = 2;
    perunwire.State state = 3;
    uint32 idx = 4;
    perunwire.Balances agreement = 5;
}

message FundResp {
    MsgError error = 1;
}

message AdjudicatorReq {
    perunwire.Params params = 1;
    bytes acc = 2;
    perunwire.Transaction tx = 3;
    uint32 idx = 4;
    bool secondary = 5;
}

/* message StateMap { */
/*     bytes id = 1; */
/*     perunwire.State state = 2; */
/* } */

message RegisterReq {
    string sessionID = 1;
    AdjudicatorReq adjReq = 2;
    /* repeated perunwire.SignedState signedStates = 3; */
}

message RegisterResp {
    MsgError error = 1;
}

message WithdrawReq {
    string sessionID = 1;
    AdjudicatorReq adjReq = 2;
    /* repeated StateMap stateMap = 3; */
}

message WithdrawResp {
    MsgError error = 1;
}

message StartWatchingLedgerChannelReq {
    string sessionID = 1;
    perunwire.Params params = 2;
    perunwire.State state = 3;
    repeated bytes sigs = 4;
}

message StartWatchingLedgerChannelResp {
    oneof response{
        RegisteredEvent registeredEvent = 1;
        ProgressedEvent progressedEvent = 2;
        ConcludedEvent concludedEvent = 3;
        MsgError error = 4;
    }
}

message StopWatchingReq {
    string sessionID = 1;
    bytes chID = 2;
}

message StopWatchingResp {
    MsgError error = 1;
}

message WatchRequestMsg {
    uint32 participant = 1;
    perunwire.SignedState state = 2;
    // Signatures of the WithdrawalAuths needed for withdrawing assets on-chain
    // (repeated for each asset_index):
    repeated SignedWithdrawalAuth withdrawal_auths = 3;
}

// Data necessary to construct a WithdrawalAuth object for withdrawing funds
// from the channel. State, Params and the asset_index=index_in_list are
// additionally needed.
message SignedWithdrawalAuth {
    // Content of the on-chain WithdrawalAuth object (Ethereum):
    //     bytes32 channelID = state.id;
    //     address participant = params.parts[i];
    //     address payable receiver; // On-chain address specified by application
    //     uint256 amount = state.allocation.balances[asset_index].balances[i];
    bytes sig = 1;
    bytes receiver = 2;
}

message WatchResponseMsg {
    bytes channel_id = 1;
    uint64 version = 2;
    bool success = 3;
}


message ForceCloseRequestMsg {
    bytes channel_id = 1;
    // Implicitly optional (messages have explicit presence). I'd love to mark
    // it explicitly as optional to indicate that it is intentionally optional,
    // but that requires protoc version 3.15 which the CI does not have (version
    // on Ubuntu: 3.12.4). We could either enable the experimental flag or
    // remove the optional flag. Since the flag doesn't make a real difference
    // here due to the "message" type, I've removed it.
    WatchRequestMsg latest = 2;
}

message ForceCloseResponseMsg {
    bytes channel_id = 1;
    bool success = 3;
}

message DisputeNotification {
    bytes channel_id = 1;
}


// AdjudicatorEventBase represents channel.AdjudicatorEventBase.
message AdjudicatorEventBase {
    bytes chID = 1;
    Timeout timeout = 2;
    uint64 version = 3;

    enum TimeoutType {
        elapsed = 0;
        time = 1;
        ethBlock = 2;
    }
    message Timeout {
	int64 sec = 1;
        TimeoutType type = 3;
    }
}

// RegisteredEvent represents channel.RegisteredEvent.
message RegisteredEvent {
    AdjudicatorEventBase adjudicatorEventBase = 1;
    perunwire.State state = 2;
    repeated bytes sigs = 3;
}

// ProgressedEvent represents channel.ProgressedEvent.
message ProgressedEvent {
    AdjudicatorEventBase adjudicatorEventBase = 1;
    perunwire.State state = 2;
    uint32 idx = 3;
}

// ConcludedEvent represents channel.ConcludedEvent.
message ConcludedEvent {
    AdjudicatorEventBase adjudicatorEventBase = 1;
}
